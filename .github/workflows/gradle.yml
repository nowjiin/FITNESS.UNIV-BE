name: CI/CD with Gradle and Docker

on:
#  push:
#    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Create application.properties for tests
        run: |
          mkdir -p src/test/resources
          echo "${{ secrets.APPLICATION_PROPERTIES }}" > src/test/resources/application.properties

      - name: Build with Gradle
        run: ./gradlew build

      # 도커 빌드 과정
      - name: Build Docker image
        run: docker build -t nowjin/fitnessuniv:latest .

      - name: Log in to Docker Hub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin

      - name: Push Docker image
        run: docker push nowjin/fitnessuniv:latest

      - name: Deploy to Server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SERVER_IP: ${{ secrets.SERVER_IP }}
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          mkdir -p ~/.ssh
          ssh-keyscan ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts
          scp -i private_key.pem docker-compose.yml centos@${{ secrets.SERVER_IP }}:/path/to/deploy/
          ssh -i private_key.pem centos@${{ secrets.SERVER_IP }} "docker pull nowjin/fitnessuniv:latest && cd /path/to/deploy && docker-compose up -d"